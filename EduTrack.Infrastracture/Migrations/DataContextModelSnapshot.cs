// <auto-generated />
using System;
using EduTrack.Infrastracture.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduTrack.Infrastracture.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("EduTrack.Domain.Entities.ComplexGradeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Grade")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("GradeAndPresenseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GradeAndPresenseId");

                    b.ToTable("ComplexGradeItems");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ComplexGradeItemHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LessonId")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxGrade")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("ComplexGradeItemHeaders");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("ConsultationHours")
                        .HasColumnType("REAL");

                    b.Property<Guid>("CourseTypeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EduYearId")
                        .HasColumnType("TEXT");

                    b.Property<double>("ExamHours")
                        .HasColumnType("REAL");

                    b.Property<string>("GroupCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LaboratoryHours")
                        .HasColumnType("REAL");

                    b.Property<int>("LabsGroupsCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LecturesHours")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("MaxDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PracticeGroupsCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PracticeHours")
                        .HasColumnType("REAL");

                    b.Property<int>("Semestr")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentsCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("EduYearId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.CourseInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseInvites");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.CourseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CourseTypes");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.EduYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("End")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Start")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EduYears");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f49e19d5-9605-43c1-b9a7-f189586090eb"),
                            End = 2023,
                            Start = 2022
                        });
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.GradeAndPresense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Grade")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("GradesAndPresenses");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DocumentedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GradeType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonType")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MaxGrade")
                        .HasColumnType("REAL");

                    b.Property<int>("Num")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RealDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SubGroupId")
                        .HasColumnType("TEXT");

                    b.Property<long>("SubGroupUniteCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Unlist")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubGroupId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.LessonTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<int>("Num")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LessonTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1222602e-e78e-4049-a93f-5b1529ad1248"),
                            End = new DateTime(1, 1, 1, 8, 50, 0, 0, DateTimeKind.Unspecified),
                            Num = 0,
                            Start = new DateTime(1, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fb20014b-6370-40ef-99f3-ea09879a9445"),
                            End = new DateTime(1, 1, 1, 8, 50, 0, 0, DateTimeKind.Unspecified),
                            Num = 1,
                            Start = new DateTime(1, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("727e22a3-e9a7-4c70-9ae9-7d73ad9d56ba"),
                            End = new DateTime(1, 1, 1, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Num = 2,
                            Start = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("84b936e9-7c25-465f-b9f3-4083020aefde"),
                            End = new DateTime(1, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Num = 3,
                            Start = new DateTime(1, 1, 1, 10, 40, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("156551d4-6855-4926-9e06-41921df6ceee"),
                            End = new DateTime(1, 1, 1, 13, 50, 0, 0, DateTimeKind.Unspecified),
                            Num = 4,
                            Start = new DateTime(1, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3793be03-38de-4f88-be5f-79087d9e48a7"),
                            End = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Num = 5,
                            Start = new DateTime(1, 1, 1, 14, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("17903d08-d58c-4af2-bec9-aa495f2665ae"),
                            End = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Num = 6,
                            Start = new DateTime(1, 1, 1, 15, 40, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("944f07af-5433-43cd-8f90-0d9ebf8e2ad3"),
                            End = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Num = 7,
                            Start = new DateTime(1, 1, 1, 17, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d8efe94a-203b-4550-8d8b-0a9b7f1fe696"),
                            End = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Num = 8,
                            Start = new DateTime(1, 1, 1, 18, 40, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CantBeRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9c755a4-6dfe-4850-bcfe-c90a5eeb8976"),
                            CantBeRemoved = true,
                            Group = "zoom",
                            Key = "zoom_api_base_url",
                            Value = "https://api.zoom.us/v2"
                        },
                        new
                        {
                            Id = new Guid("a8a3b4a6-de1c-4559-a3cf-bac2f2a2dd43"),
                            CantBeRemoved = true,
                            Group = "zoom",
                            Key = "zoom_api_users_me",
                            Value = "https://api.zoom.us/v2/users/me"
                        },
                        new
                        {
                            Id = new Guid("86fe5e77-b92d-43f5-8ef5-94f5ee037ce2"),
                            CantBeRemoved = true,
                            Group = "zoom",
                            Key = "zoom_api_users_me_meetings",
                            Value = "https://api.zoom.us/v2/users/me/meetings?type=previous_meetings"
                        },
                        new
                        {
                            Id = new Guid("4e5daa7a-75fb-4b3f-8fdf-efdb683b57f9"),
                            CantBeRemoved = true,
                            Group = "zoom",
                            Key = "zoom_api_users_me_recordings",
                            Value = "https://api.zoom.us/v2/users/me/recordings"
                        },
                        new
                        {
                            Id = new Guid("3cb3c841-ec48-4841-8487-aee0873783e3"),
                            CantBeRemoved = true,
                            Group = "zoom",
                            Key = "zoom_api_users_me_webinars",
                            Value = "https://api.zoom.us/v2/users/me/webinars"
                        },
                        new
                        {
                            Id = new Guid("4945473e-cb1b-4e95-a8ab-c4699b0d3ef6"),
                            CantBeRemoved = true,
                            Group = "zoom",
                            Key = "zoom_api_client_id",
                            OwnerId = new Guid("4c5b022e-c82f-41c3-b1fb-c936a4132e33"),
                            Value = "Yo_UM8esSOqJCHMRHCJVg"
                        },
                        new
                        {
                            Id = new Guid("189e79f4-08ca-4dae-a48e-7405811ec434"),
                            CantBeRemoved = true,
                            Group = "zoom",
                            Key = "zoom_api_client_secret",
                            OwnerId = new Guid("4c5b022e-c82f-41c3-b1fb-c936a4132e33"),
                            Value = "PsF2x0mNgKwe77LhROffARNyI6rDCZeO"
                        },
                        new
                        {
                            Id = new Guid("ebe39b42-3746-40f0-8b39-afabdf619269"),
                            CantBeRemoved = true,
                            Group = "zoom",
                            Key = "zoom_api_auth_url",
                            Value = "https://zoom.us/oauth/authorize"
                        },
                        new
                        {
                            Id = new Guid("c427798f-cd2a-4185-a5dd-fbde35609d92"),
                            CantBeRemoved = true,
                            Group = "zoom",
                            Key = "zoom_api_access_token_url",
                            Value = "https://zoom.us/oauth/token"
                        });
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.OtherCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EduYearId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupCode")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Hours")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Semestr")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentsCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WorkTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EduYearId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("OtherCourses");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.OtherWorkHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Hours")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("OtherWorkHours");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.StudentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SubGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentRecords");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.SubGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("SubGroups");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c5b022e-c82f-41c3-b1fb-c936a4132e33"),
                            Email = "yurakleban@gmail.com",
                            FirstName = "Юрій",
                            IsApproved = true,
                            LastName = "Клебан",
                            PasswordHash = "Rjd8FlRSK8EDkfbzJXM634vij+q61B/qHIXpBwIjZLk=",
                            PasswordSalt = new byte[] { 65, 241, 174, 237, 48, 162, 27, 87, 47, 28, 153, 88, 147, 245, 216, 44 },
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "teacher"
                        });
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LessonType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("PerStudentNorm")
                        .HasColumnType("REAL");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("WorkTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e125b5c7-2b01-4958-b7b8-b5c257198da1"),
                            LessonType = 1,
                            Order = 1,
                            ShortTitle = "Лекц.",
                            Title = "Лекційні заняття"
                        },
                        new
                        {
                            Id = new Guid("e13493ad-0a12-4c0e-8b1d-3f6b7c5c08ab"),
                            LessonType = 2,
                            Order = 2,
                            ShortTitle = "Груп.",
                            Title = "Групові заняття"
                        },
                        new
                        {
                            Id = new Guid("ad25bbb9-c56e-4adc-9b76-2c84a7e8051c"),
                            LessonType = 3,
                            Order = 3,
                            ShortTitle = "Лаб.",
                            Title = "Лабораторні заняття"
                        },
                        new
                        {
                            Id = new Guid("6a7f1a57-00d7-456f-93ee-9f307eb0c0df"),
                            LessonType = 4,
                            Order = 4,
                            ShortTitle = "Конс. екз.",
                            Title = "Консультації до екзамену"
                        },
                        new
                        {
                            Id = new Guid("b319a8d3-3995-4315-b99d-cde41c7f4195"),
                            LessonType = -1,
                            Order = 5,
                            ShortTitle = "Конс. сем",
                            Title = "Консультації впродовж семестру"
                        },
                        new
                        {
                            Id = new Guid("72fb6e65-b1ec-4217-8e31-3dcd5ee3bd65"),
                            LessonType = -1,
                            Order = 6,
                            PerStudentNorm = 0.25,
                            ShortTitle = "Пром. контр.",
                            Title = "Проміжний контроль"
                        },
                        new
                        {
                            Id = new Guid("0f962e0e-c6fc-482f-b541-1cab9d088b6e"),
                            LessonType = -1,
                            Order = 7,
                            PerStudentNorm = 0.25,
                            ShortTitle = "Залік",
                            Title = "Залік"
                        },
                        new
                        {
                            Id = new Guid("4853e8db-30bc-4b05-bb0a-4107ddcfdcb8"),
                            LessonType = 5,
                            Order = 8,
                            PerStudentNorm = 0.33000000000000002,
                            ShortTitle = "Екзамен",
                            Title = "Екзамен"
                        },
                        new
                        {
                            Id = new Guid("2606a254-5f5d-4f03-b4e9-479f65893d20"),
                            LessonType = -1,
                            Order = 9,
                            PerStudentNorm = 3.0,
                            ShortTitle = "Курс. роб.",
                            Title = "Курсові роботи"
                        },
                        new
                        {
                            Id = new Guid("20ea3cb2-ebff-4401-b7da-adf12b7f49cf"),
                            LessonType = -1,
                            Order = 10,
                            PerStudentNorm = 15.0,
                            ShortTitle = "Кваліф. роб.",
                            Title = "Керівництво кваліфікаційними роботами"
                        },
                        new
                        {
                            Id = new Guid("c1b8eec2-7c15-491d-b48d-2b73663ec270"),
                            LessonType = -1,
                            Order = 11,
                            ShortTitle = "Реценз.",
                            Title = "Рецензування"
                        },
                        new
                        {
                            Id = new Guid("5f8fa6e5-b408-4043-80a2-e94f66d35b18"),
                            LessonType = -1,
                            Order = 12,
                            ShortTitle = "ЕК(захист)",
                            Title = "Участь у роботі ЕК(захист)"
                        },
                        new
                        {
                            Id = new Guid("493ceb9f-28ca-4fad-b8a6-1c1655f6dbdd"),
                            LessonType = -1,
                            Order = 13,
                            PerStudentNorm = 0.5,
                            ShortTitle = "ЕК(екзамен)",
                            Title = "Участь у роботі ЕК(екзамен)"
                        },
                        new
                        {
                            Id = new Guid("db5bfafb-2f2e-4c03-872a-2940034c3e66"),
                            LessonType = -1,
                            Order = 14,
                            PerStudentNorm = 2.0,
                            ShortTitle = "Кер. практ.",
                            Title = "Керівництво практикою"
                        },
                        new
                        {
                            Id = new Guid("9904944f-403c-4f79-9847-b5353baa23fa"),
                            LessonType = -1,
                            Order = 15,
                            ShortTitle = "Кер. асп.",
                            Title = "Керівництво аспірантами"
                        },
                        new
                        {
                            Id = new Guid("1157afc3-4546-4a67-ae28-4615b71e4dc2"),
                            LessonType = -1,
                            Order = 16,
                            ShortTitle = "Кер. стаж.",
                            Title = "Керівництво стажистами"
                        },
                        new
                        {
                            Id = new Guid("24d3da74-b1a4-4d8a-b404-df4cd2f0fc3d"),
                            LessonType = -1,
                            Order = 17,
                            ShortTitle = "Контр. відв.",
                            Title = "Контрольні відвідування"
                        });
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ComplexGradeItem", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.GradeAndPresense", null)
                        .WithMany("ComplexGradeItems")
                        .HasForeignKey("GradeAndPresenseId");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ComplexGradeItemHeader", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Lesson", null)
                        .WithMany("ComplexGradeItems")
                        .HasForeignKey("LessonId");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Course", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.CourseType", "Type")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.EduYear", "EduYear")
                        .WithMany()
                        .HasForeignKey("EduYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", "Owner")
                        .WithMany("OwnedCourses")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EduYear");

                    b.Navigation("Owner");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.CourseInvite", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany("Invites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.GradeAndPresense", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Lesson", "Lesson")
                        .WithMany("GradesAndPresenses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.StudentRecord", "Student")
                        .WithMany("GradesAndPresense")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId");

                    b.HasOne("EduTrack.Domain.Entities.SubGroup", "SubGroup")
                        .WithMany("Lessons")
                        .HasForeignKey("SubGroupId");

                    b.HasOne("EduTrack.Domain.Entities.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("SubGroup");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Option", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.OtherCourse", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.EduYear", "EduYear")
                        .WithMany()
                        .HasForeignKey("EduYearId");

                    b.HasOne("EduTrack.Domain.Entities.User", "Owner")
                        .WithMany("OwnederCourses")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId");

                    b.Navigation("EduYear");

                    b.Navigation("Owner");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.OtherWorkHours", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.OtherCourse", "Course")
                        .WithMany("WorkHours")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.StudentRecord", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId");

                    b.HasOne("EduTrack.Domain.Entities.SubGroup", "SubGroup")
                        .WithMany("Students")
                        .HasForeignKey("SubGroupId");

                    b.HasOne("EduTrack.Domain.Entities.User", "User")
                        .WithMany("StudentRecords")
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("SubGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.SubGroup", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany("SubGroups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.WorkType", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", null)
                        .WithMany("OtherWorkTypes")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Course", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Lessons");

                    b.Navigation("OtherWorkTypes");

                    b.Navigation("Students");

                    b.Navigation("SubGroups");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.CourseType", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.GradeAndPresense", b =>
                {
                    b.Navigation("ComplexGradeItems");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("ComplexGradeItems");

                    b.Navigation("GradesAndPresenses");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.OtherCourse", b =>
                {
                    b.Navigation("WorkHours");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.StudentRecord", b =>
                {
                    b.Navigation("GradesAndPresense");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.SubGroup", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.User", b =>
                {
                    b.Navigation("OwnedCourses");

                    b.Navigation("OwnederCourses");

                    b.Navigation("StudentRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
