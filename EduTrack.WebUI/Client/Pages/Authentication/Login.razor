@page "/login"
@using EduTrack.WebUI.Client.Shared.PlainAdmin;
@using EduTrack.WebUI.Client.HttpServices.Authentification;
@using EduTrack.WebUI.Shared.Authentication;
@using System.Text.Json;

@layout PlainAdminCleanLayout

@inject HttpAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthentificationStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject TokenManagerService TokenManagerService


<style>
    .auth_cover_img {
        background-image: url("/plainadmin/assets/images/auth/signin.jpg");
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center center;
    }

    .signin-section .auth-row {
        height: 500px;
    }
</style>

<section class="">

    <div class="container-fluid">

        <div class="row g-0 auth-row">
            <div class="col-lg-7 auth_cover_img">
                <div class="auth-cover-wrapper bg-primary-100">
                </div>
            </div>
            <!-- end col -->
            <div class="col-lg-5">
                <div class="signin-wrapper">
                    <div class="form-wrapper">
                        <div>
                            <img src="/plainadmin/assets/images/logo/logo.png" style="height: 40px" />
                        </div>
                        <br />
                        <h6>Вхід у систему</h6>
                        <br />
                        <p class="text-sm mb-25">
                            Увійдіть в систему за допомогою електронної пошти на пароля
                        </p>
                        <EditForm Model="@model" OnValidSubmit="@LoginAsync">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-12">
                                    <SfTextBox @bind-Value="model.Email" Type="Syncfusion.Blazor.Inputs.InputType.Email" Placeholder="Email" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                                    <ValidationMessage For="@(() => model.Email)" class="text-danger" />
                                </div>
                                <br /><br />
                                <!-- end col -->
                                <div class="col-12">
                                    <div class="input-style-1">
                                        <SfTextBox @bind-Value="model.Password" Type="Syncfusion.Blazor.Inputs.InputType.Password" Placeholder="Пароль" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                                        <ValidationMessage For="@(() => model.Password)" class="text-danger" />
                                    </div>
                                </div>
                                <br /><br />
                                <!-- end col -->
                                <div class="col-12">
                                    <SfButton CssClass="e-success e-block" type="submit">Увійти</SfButton>
                                </div>
                                <div class="col-12">
                                    <div class="text-center text-danger" style="margin: 7px 10px; font-size: 14px">@ServerError</div>
                                </div>
                            </div>
                            <!-- end row -->
                        </EditForm>
                        <br />
                        <div class="text-center text-muted" style="margin-top: 10px; font-size: 14px;">&copy; @DateTime.Now.Year Юрій Клебан</div>
                    </div>
                </div>
            </div>
            <!-- end col -->
        </div>
        <!-- end row -->
    </div>



</section>
<style>
    .e-big {
        padding: 10px 15px;
        font-size: 18px;
    }
</style>

@code {

    private UserLoginDto model = new();

    string ServerError = " ";

    protected override void OnParametersSet()
    {
        model.Email = "yurakleban@gmail.com";
        model.Password = "demoPA$$W0RD";
    }

    private async Task LoginAsync()
    {
        var response = await AuthenticationService.LoginAsync(model);

        if (response.IsError)
        {
            ServerError = response.Title;
        }
        else
        {
            await TokenManagerService.SetAccessTokenAsync(response.Value.AccessToken);
            await TokenManagerService.SetRefreshTokenAsync(response.Value.RefreshToken);

            await AuthentificationStateProvider.GetAuthenticationStateAsync();
            Navigation.NavigateTo("/");
        }
    }

}
